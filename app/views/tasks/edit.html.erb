<div class="flex flex-col items-center my-10">
  <div class="card bg-base-100 shadow-xl max-w-2xl w-full">
    <div class="card-body">      
      <%= form_with model: @task, local: true, html: { class: "flex flex-col gap-6" } do |f| %>
        <!-- タイトル入力フィールド -->
        <div class="form-control">
          <%= f.label :title, class: "label" %>
          <div class="join w-full">
            <%= f.text_field :title, class: "input input-bordered join-item flex-1" %>
            <!-- ♻️onclickイベントは改善の余地あり。今後Stimulusコントローラーで実装予定 -->
            <button type="button" 
                    class="btn btn-square join-item"
                    onclick="document.getElementById('task_title').value = ''">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
                <path d="M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z" />
              </svg>
            </button>
          </div>
        </div>

        <!-- タグ選択セクション -->
        <div class="form-control">
          <%= f.label :tag_ids, class: "label" %>
          <!-- タグ選択ドロップダウン -->
          <div class="dropdown">
            <!-- ♻️safariブラウザ含むすべてのブラウザで動作するコード。https://v4.daisyui.com/components/dropdown/#method-2-using-css-focus
            <div tabindex="0" role="button" class="btn btn-outline">
              <span>選択</span>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                <path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
              </svg>
            </div>
            -->
            <!-- ⚠️buttonタグを使用した場合、safariブラウザでは動作しない可能性がある。https://v4.daisyui.com/components/dropdown/#method-2-using-css-focus-->
            <button type="button" class="btn btn-outline w-full">
              <span>選択</span>
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                <path fill-rule="evenodd" d="M4.22 6.22a.75.75 0 0 1 1.06 0L8 8.94l2.72-2.72a.75.75 0 1 1 1.06 1.06l-3.25 3.25a.75.75 0 0 1-1.06 0L4.22 7.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
              </svg>
            </button>

            <!-- 🎓tabindex="0"により、ラベルをクリックしても画面が閉じなくなる。-->
            <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] p-2 shadow w-full max-h-60 overflow-y-auto">
              <% Tag.all.each do |tag| %>
                <li>
                  <label class="flex items-center gap-2">
                    <input type="checkbox" 
                            name="task[tag_ids][]" 
                            value="<%= tag.id %>"
                            <%= 'checked' if @task.tag_ids.include?(tag.id) %>
                            class="checkbox checkbox-primary">
                    <span><%= tag.name %></span>
                  </label>
                </li>
              <% end %>
            </ul>
          </div>
        </div>

        <!-- ♻️タグ検索セクション 将来的に以下の実装で行いたいが、jsがまだ理解不足なので置いておく-->
        <%#= render partial: "tag_search_form", locals: { f: f, task: @task } %>

        <!-- やることリストセクション（プレースホルダー） -->
        <div class="form-control">
          <div class="flex items-center justify-between mb-3">
            <!-- ♻️ここはf.labelに変更予定 -->
            <%= f.label :todos, class: "label" %>
            <button type="button" class="btn btn-ghost btn-sm" onclick="addTodoField()">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                <path d="M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z" />
              </svg>
              <span>追加</span>
            </button>
          </div>

          <!-- Todoリストの表示・編集フォーム -->
          <div id="todos-container" class="space-y-2">
            <%= f.fields_for :todos do |todo_form| %>
              <div class="flex items-center gap-2">                
                <!-- 削除ボタン -->
                <button type="button" 
                        class="btn btn-circle btn-outline btn-error btn-sm"
                        onclick="removeTodoField(this)">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                    <path d="M5.28 4.22a.75.75 0 0 0-1.06 1.06L6.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L8 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L9.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L8 6.94 5.28 4.22Z" />
                  </svg>
                </button>
                <!-- todo入力フィールド -->
                <%= todo_form.text_field :body, 
                    placeholder: "やることを入力してください", 
                    class: "input input-bordered flex-1" %>
                <%= todo_form.hidden_field :id %>
                <%= todo_form.hidden_field :_destroy, class: "hidden" %>
              </div>
            <% end %>
          </div>
        </div>

        <!-- アクションボタン -->
        <div class="flex justify-end gap-4 pt-4">
          <%= link_to "戻る", task_path(@task), class: "btn btn-ghost" %>
          <%= f.submit "変更", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- ♻️ jsは今後すべてStimulusコントローラーに移す予定 -->
<script>
function addTodoField() {
  const container = document.getElementById('todos-container');
  const todoCount = container.children.length; // 🎓 todoの数、つまり新しいtodoのindexを取得
  
  // ♻️ この箇所は今後formオブジェクトを使った書き方に変更予定(CSRF対策、エラーハンドリングなどが欲しいため)
  // 方法としては、<template>タグ内でf.fields_forを使う。
  const newTodoHtml = `
    <div class="flex items-center gap-2">
      <button type="button" 
              class="btn btn-circle btn-outline btn-error btn-sm"
              onclick="removeTodoField(this)">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
          <path d="M5.28 4.22a.75.75 0 0 0-1.06 1.06L6.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L8 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L9.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L8 6.94 5.28 4.22Z" />
        </svg>
      </button>
      <input type="hidden" name="task[todos_attributes][${todoCount}][_destroy]" value="0" class="hidden">
      <input type="text" 
              name="task[todos_attributes][${todoCount}][body]" 
              placeholder="やることを入力してください" 
              class="input input-bordered flex-1">
      <input type="hidden" name="task[todos_attributes][${todoCount}][id]" value="">
    </div>
  `;
  container.insertAdjacentHTML('beforeend', newTodoHtml); // 🎓 'beforeend'により、</div>の直前に新しいtodoを追加する。
}

function removeTodoField(button) {
  const todoForm = button.closest('.flex');
  const todoId = todoForm.querySelector('input[type="hidden"][name$="[id]"]').value;
  const todoDestroyField = todoForm.querySelector('input[type="hidden"][name$="[_destroy]"]');

  if (confirm('このtodoを削除しますか？')) {
    if (todoId) {
      // 既存のtodoの場合、_destroyフィールドを設定して削除マーク
      todoDestroyField.value = '1';
      todoForm.style.display = 'none'; // 🎓 Railsで削除対象を特定するためにDOM要素を残す必要がある。
    } else {
      // 新規追加のtodoの場合、直接削除
      todoForm.remove(); // DOM要素ごと削除
    }
  }
}
</script>
